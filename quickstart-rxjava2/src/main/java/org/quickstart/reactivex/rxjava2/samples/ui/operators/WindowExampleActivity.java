package org.quickstart.reactivex.rxjava2.samples.ui.operators;import java.util.concurrent.TimeUnit;import org.quickstart.reactivex.rxjava2.samples.utils.AppConstant;import io.reactivex.Observable;import io.reactivex.functions.Consumer;import io.reactivex.schedulers.Schedulers;public class WindowExampleActivity {  private static final String TAG = WindowExampleActivity.class.getSimpleName();  /*   * Example using window operator -> It periodically   * subdivide items from an Observable into   * Observable windows and emit these windows rather than   * emitting the items one at a time   */  protected void doSomeWork() {    Observable.interval(1, TimeUnit.SECONDS).take(12).window(3, TimeUnit.SECONDS).subscribeOn(Schedulers.io())        // .observeOn(AndroidSchedulers.mainThread())        .subscribe(getConsumer());  }  public Consumer<Observable<Long>> getConsumer() {    return new Consumer<Observable<Long>>() {      @Override      public void accept(Observable<Long> observable) {        System.out.println("Sub Divide begin ....");        System.out.println(AppConstant.LINE_SEPARATOR);        observable.subscribeOn(Schedulers.io())            // .observeOn(AndroidSchedulers.mainThread())            .subscribe(new Consumer<Long>() {              @Override              public void accept(Long value) {                System.out.println("Next:" + value);                System.out.println(AppConstant.LINE_SEPARATOR);              }            });      }    };  }}